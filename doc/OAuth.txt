****************************************************
2016/09/13 - domaine oa.dnc.global
oadnc : oadnY...!
BdD dnc_oauth2 pour dnc_user_oa : oaY...!  (tous privilèges)
SPIP: spd... : spX...!

****************************************************
2016/10/05 - Installation de OAuth 2.0 Server PHP


Voir : http://bshaffer.github.io/oauth2-server-php-docs/


1. installation de Composer

Voir : https://documentation.cpanel.net/display/CKB/How+to+Set+Up+(PHP)+Composer

Les réglages étaient déjà bon, sauf detect_unicode Off, pas trouvé.

Run composer diagnose : pas Ok
Run composer self-update

Il ne faut pas installer ni lancer composer en tant que root.
On se loge en SSH avec user dnc : dnY...!

Run composer self-update --update-keys
Public Keys : sur : https://composer.github.io/pubkeys.html
Run composer diagnose : Ok !

Les clefs sont dans /home/dnc/.composer

Par la suite, mise à jour de bshaffer :
dnc@vps223233 [/home/dnc/oa/vendor/bshaffer/oauth2-server-php]# composer instal
l --no-dev


2. Création du projet oa.dnc.global

2.1. Avec cPanel sur dnc.global, création de oa.dnc.global dans le répertoire oa

2.2. En SSH ( toujours avec l'user dnc ):
cd /home/dnc/oa/
composer composer require bshaffer/oauth2-server-php "~1.8" 

2.3. Créer la base de données

Avec cPanel, création de la BdD dnc_oauth2 pour dnc_user_oa : oaY...!  (tous privilèges)

Voir : http://bshaffer.github.io/oauth2-server-php-docs/cookbook/

2.4. Construire les controllers.
...

2.5. Faire les tests avec Google Playground : Ok

3. Installation de SPIP dans le répertoire /
Même BdD.
Admin SPIP : spd... : spX...!
E-mail : atelier@degoy.com


4. Objets Client et User

A l'aide du plugin fabrique, création des objets editoriaux SPIP Users et 
Clients.

4.1. Objet Client.

Nota : id_client est la clé primaire. client_id est l'identificateur (lisible 
par l'homme).
Ce champ est indexé unique.

Un (ou plusieurs) auteur(s) (au sens de SPIP) est (sont) propriétaire(s) de 
l'objet éditorial Client.

4.2. Objet User.

L'utilisateur final (user au sens de OAuth) n'est pas un auteur (pas même un visiteur) 
au sens de SPIP. La table spip_user doit contenir toutes les données relatives 
à l'utilisateur final. L'E-mail est nécessaire ne serait-ce que pour la communication 
avec l'utilisateur. En fait, on pourra utiliser l'email comme identifiant.

oauth.php utilise username comme clé unique. Ce n'est pas conforme à SPIP. 
??? On déduira username par hashage de l'email, qui est unique.

TODO: Les Users ne sont pas liés à un client. En revanche, les Users sont liés à un 
auteur, ce qui permet de relier un User à toutes les applications d'un même Auteur. 

5. Extension de l'objet Scope
Les scopes doivent être expliqués à l'utilisateur final, sinon, comment lui 
demander de les approuver? ajout du champ scope_description dans la table scopes. 

De plus, les scopes doivent être liés aux applications clientes, l'auteur pouvant 
sélectionner quels scopes il attache à telle de ses application.
Création client (page=creer-client) : 
TODO : 
- Dans server.php, construire $supportedScopes avec le contenu de la table scopes.
- Création client (page=creer-client) : contrôler que les scopes entrés sont 
conformes aux scopes autorisés

6. Extension des informations d'auteur avec le plugin Inscription3. 

Nota : le login se fait avec l'E-mail par configuration du plugin Inscription3.

Création de la page auteur-details avec un formulaire editer-auteur copié de
Inscription3 et modifié, ainsi que les libellés


7. Implémentation de OpenID

Voir : http://bshaffer.github.io/oauth2-server-php-docs/overview/openid-connect/

ALTER TABLE spip_authorization_codes ADD id_token VARCHAR(1000)  NULL  DEFAULT NULL; 

Création de la paire de clefs avec http://travistidwell.com/jsencrypt/demo/
Les clefs sont stockées dans .keys.
Nota : de ce fait, les clefs sont communes à tous les clients. Appelons cela "la paire (de clés) du serveur".

Il est préférable de stocker les clefs en BdD :
CREATE TABLE oauth_public_keys (
  client_id            VARCHAR(80),
  public_key           VARCHAR(2000),
  private_key          VARCHAR(2000),
  encryption_algorithm VARCHAR(100) DEFAULT 'RS256'
)

Nota : La table spip_users comporte un identifiant unique id_user, requis par SPIP.
Il ne faut pas confondre avec l'user_id défini par la norme OpenID, qui est en réalité
le champ $username comme il apparait dans la fonction handleUserInfoRequest :
// the default behavior is to use "username" as the user_id
        return array_merge(array(
            'user_id' => $username
        );    


gerer-keys : Dialogue pour que l'auteur enregistre ses clefs avec l'application. 
         
Création des formulaires de profil.



         
8. GhostKeys : Masquage et codage des appuis de touche lors de l'entrée du mot de passe.
Voir : authorize.php, gkeys.php.

...

9. Création du point d'extrémité resource
Voir  http://oa.dnc.global/Authentification-du-jeton-d-acces-Access-Token.htm

10. CloudSession

10.1. Structure de la table `spip_cloudsessions`
CREATE TABLE IF NOT EXISTS `spip_cloudsessions` (
  `cloudsession_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `token` varchar(256) NOT NULL,
  `data` mediumtext,
  `maj` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`cloudsession_id`),
  UNIQUE KEY `token` (`token`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;


11. Installation de defuse/php-encryption avec Composer.
Voir : https://github.com/defuse/php-encryption/
root@vps223233 [/home/dnc/oa]# composer require defuse/php-encryption
Using version ^2.0 for defuse/php-encryption
./composer.json has been updated
paragonie/random_compat suggests installing ext-libsodium (Provides a modern cry
pto API that can be used to generate random bytes.)
Writing lock file
Generating autoload files
2019/01 : DEFUSE N'EST PLUS UTILISE. On utilise Open SSL.



******

Modification à spipr_dist rubrique.html ligne 47 : supprimer <//B_articles> afin 
de toujours afficher le plan de la rubrique.

TODO:

Plugin Flatly : les font-size en em !!!

Effacer les jetons expirés de la table access_tokens ?  id pour  
authorization_codes ?


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Modifications apportées à bshaffer (hors SPIP)

[dnc1] 2016/10/11 - Pdo.php : dysfonctionnnement de func_num_args().
[dnc2] 2016/10/25 - UserClaimsInterface : se conformer au standard OpenID Connect. 
[dnc2'] OPENID_CLAIM_VALUES n'était pas défini ! 

[dnc3] Bug in PDO::checkClientCredentials. Trace de DEBUG montre que les paramètres ont besoin d'urldecode :
-------- checkClientCredentials -----------
client_id : certification_openid
client_secret : Hgfd5vW%21OpZq
result : Array
(
    [id_client] => 20
    [client_id] => certification_openid
    [client_secret] => Hgfd5vW!OpZq
    [redirect_uri] => https://op.certification.openid.net:60101/authz_cb
    [grant_types] => authorization_code client_credentials refresh_token
    [scope] => openid profile basic
    [date_publication] => 2018-11-04 17:22:13
    [statut] => publie
    [user_id] => spdegoy
    [maj] => 2018-11-04 18:57:37
    [composition] => 
    [composition_lock] => 0
    [css] => 
)

[dnc4] 2018/11/05 - Ajout de kid dans le jeton d'identité. kid est un simple hash de la clé publique.

[dnc5] 2018/11/06 - S'assurer du format des clés. TODO: à préciser.

(dnc7 ???)

[dnc6] 2018/11/09 - déclarations jku et jwk dans le header du JWT.

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

[dnc8] 2018/11/12 - User Fingerprint (ufp). Spécifique DnC, garder secret ! 
    L'ufp est véhiculé par le paramètre nonce.

[dnc9] 2018/12/01 - SLI Single Login Identification.
[dnc9'] 2019/01 : On utilise Open SSL pour crypter le cookie SLI : intégration de crypto.php 2018/03/26 
    defuse n'est plus utilisé. TODO : supprimmer defuse.

[dnc10] 2018/12/06 - Ré-authentification silencieuse (prompt = 'none' ) : que faire si l'utilisateur n'est pas connecté ?
La spécification dit de retourner une erreur. Ceci reporte sur l'application la charge de recommencer l'authentification.
La constante de configuration. Il est plus sûr et plus simple (on évite un aller-retour) de gérer cela au niveau du serveur.

[dnc11] 2018/12/15 - fichier de configuration du serveur.

[dnc13] 2018/12/.. - Fonction interscope().

[dnc12] 2018/14/.. - Kerberos. 

*** 2018/12/... Installation sur serveur intergros 10.1.10.45 ***
Voir : I:\Profils-Dep\Bertrand\Mes documents\DnC\Clients\intergros\POC OIDC\10.1.10.45.txt

[dnc14] 2018/12/29 - Test sur l'IP de l'application cliente.
    Modification du plugin oauth et de la table clients : champ client_ip.
    Si l'IP statique de l'application cliente est indiquée, elle est vérifiée par le contrôleur authorize.
(t=2h)

[dnc15] 2019/01/12 - Fonctionnement du flux JWT Bearer : la fonction getClientKey() ne retournait rien, car la table jwt reste vide.
de façon minimale, la fonction retourne la clé de l'application courante.
(t=0.5h) TODO: approfondir.

[dnc16] 2019/01/15 - extension de la table clients : champs texte1 et 2 (pour le formulaire de login par exemple).
ALTER TABLE `spip_clients` ADD `texte1` VARCHAR(255) NULL AFTER `css`, ADD `texte2` VARCHAR(255) NULL AFTER `texte1`;
Compléments aux formulaires.
(t=1.2h)

[dnc17] 2019/01/17 - Déplacement de SPIP dans le dossier /web. C'est plus clair!
    Dans .htaccess :
    Suite à la modification /web, rediriger les anciennes URL pour conserver les liens externes et le référencement
    Réécrire impérativement (pourquoi?) les appels aux pages sous la forme /web/spip.php?page= et non /?page=
    TODO: ne pas préciser /web dans le plugin oidcclient !!!
(t=3.6h)

[dnc18] Pour éviter l'erreur self-signed certificate. TODO// à supprimer si le certificat est correctement signé.
(t=1.6h)

[dnc19] 2019/01/23 - Ajouter 'privileges' comme scope autorisé -> PRIVILEGES_CLAIM_VALUES.
    Le groupe privileges comprend les claims 'scope' et 'profile'.
    
[dnc20] 2019/01/23 - la fonction generateAccessToken est susceptible de retourner une chaine contenant un point,
        ce qui fait échouer la function getAccessToken et crée une tentative de 
        duplication au lieu de rafraîchir avec function setAccessToken.
        A creuser...
        
[dnc21] 2019/01/23 - state doit être crypté dans $_SESSION.
        voir : https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth
(t=2.4h)
        
[dnc14'] 2019/01/28 - Contrôler l'IP.

[dnc22] 2019/01/28 - Contrôler le domaine du requêteur (token, introspect, userinfo). Il doit être compris dans la liste 
des URLs de retour enregistrées pour l'application cliente.
TODO: BUG!  

[dnc23] 2019/01/28 - OIDC : Toujours inclure at_hash dans le JWT. TODO: ne fonctionne pas?

[dnc24] 2019/01/28 - OIDC : Gérer les demandes de consentement sur les portées d'autorisation.
(t=8.5h)

*** 2019/02/02 MàJ du serveur intergros 10.1.10.45 ***
(t=1.5h)

*** suite du développement sur oidc.dnc.global :

[dnc25] 2019/02/24 - Laisser remonter le détail des erreurs. TODO: d'autres cas ???
(t=0.2h)

[dnc26] 2019/02/26 - Affecter un numéro et un poids aux événements. 
Ajout des champs errnum et weight dans la table oidc_logs :
ALTER TABLE `spip_oidc_logs` ADD `weight` SMALLINT NULL AFTER `level`, ADD `errnum` SMALLINT NULL AFTER `weight`;

[dnc26b] Pour chaque état, calculer un poids et créer une alerte. 
Nouvelle table oidc_states :
CREATE TABLE `spip_oidc_states` (
  `state` varchar(256) NOT NULL,
  `total_weight` int(11) NOT NULL,
  `maj` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `status` smallint(6) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
ALTER TABLE `spip_oidc_states`
  ADD PRIMARY KEY (`state`),
  ADD KEY `status` (`status`);
 
[dnc26c] Pour chaque remote_addr, calculer un poids et créer une alerte. 
Nouvelle table oidc_remote_addr :
CREATE TABLE `spip_oidc_remote_addr` (
  `remote_addr` varchar(64) NOT NULL,
  `total_weight` int(11) UNSIGNED NOT NULL,
  `maj` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `status` smallint(6) DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
ALTER TABLE `spip_oidc_remote_addr`
  ADD PRIMARY KEY (`remote_addr`),
  ADD KEY `status` (`status`);
   
[dnc26d] Emettre une alerte par mail. 
Tâche CRON : wget -O /dev/null https://oa.dnc.global/web/?page=envoyer_mail >/dev/null 2>&1

(t=15h)

2019/02/27-29
plugin oauth, nouvelles vues : suivre, evenements, state, remote-addr, alertes, bad-remote-addr.
(t=12)

*** 2019/02/28 MàJ du serveur oa.dnc.global depuis oidc.dnc.global ***

[dnc27] 2019/03/02-04
*** Statistiques
Les statistiques sont générées à partir des enregistrements effectués par les 
contrôleurs au niveau de la couche OAuthSD (et pas par la bibliothèque oauth2-server-php).
Les événements sont enregistrés dans la table oidc_logs.
Une tâche Cron effectue toutes les minutes la somme des différents événements et 
met à jour la table oidc_stats ainsi que les tables oidc_remote_adress et oidc_states.
Ce sont ces dernières tables qui fournissent les données des vues statistiques.
** 
[dnc27a] Ajout d'un log en tête de Authorize, Token, UserInfoExt et Introspect, et plus de messages d'erreur.
[dnc27b] Création de la table oidc_stats :
CREATE TABLE `spip_oidc_stats` (
  `datetime` datetime NULL,
  `authorize_count` bigint(20) DEFAULT NULL,
  `introspect_count` bigint(20) DEFAULT NULL,
  `token_count` bigint(20) DEFAULT NULL,
  `authorize_ok_count` bigint(20) DEFAULT NULL,
  `userinfoext_count` bigint(20) DEFAULT NULL,
  `errors_count` bigint(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
ALTER TABLE `spip_oidc_stats`
  ADD UNIQUE KEY (`time`);
(t=25h)

2019/03/03-...
*** Graphe des statistiques
[dnc27c] version avec données en tableau côté client générées par une boucle SPIP.
[dnc27d] version avec server-side processing. Utilise l'API HTTP, création du plugin http4datatables .../web/http.api/datatables/oidc_logs/
[dnc27e] table oidc_stats, ajout du champ id_oidc_log qui donne l'id du premier événement de la minute considérée.
[dnc27f] L'accès aux API HTTP peut être autorisé aussi bien avec un jeton d'accès qu'un jeton d'identité. 
Se souvenir : les autorisations ne distinguent pas le format, toutesles autorisations sont donc définies dans 
collectionjsonoauthsd.
(t=17)... 


2019/03/04-13
*** API REST (Serveur HTTP abstrait) avec SPIP
Ajout des plugins Serveur HTTP abstrait.
Création du plugin collectionjsonoauthsd sur le modèle de API Collection+JSON.
Création des types clients, oidc_logs, users.  
[dnc27e] La table oidc_logs est introduite dans oauth/base/oauth.php : oidc_log est un objet editorial. 
Ainsi, collectionjson_get_collection peut s'appuyer sur l'API objet pour générer un JSON.
2019/03/13 : les 3 sites à jour.
(t=46h)

2019/03/08-04/09
[dnc28] - Plugin oidcclient v1.0.3. Monitoring de l'état de connexion.
Attention : dans les pages où la panne aside est désactivée, le script inc-aside-js 
plante silencieusement et les scripts suivants dans la page, dont OIDC Client Monitoring, 
ne sont pas exécutés.
Surcharge de la fonction action_logout_dist() : si le monitoring voit que l'utilisateur n'est plus connecté, 
mettre fin à la session locale.    
(t=5,5h)
[dnc28b] Si on passe le paramètre logout='local' à l'action logout, on n'opère pas de déconnexion SLO.
[dnc28c] Le monitoring est une liaison serveur-serveur, Authorize doit répondre sans redirection.
[dnc28d] 2019/04/06 - Authorize retourne timeleft. Signaler à l'utilisateur que la fin de session approche et popups. 
[dnc28e] 2019/04/09 - page=login_oidc pour afficher directement le login OIDC (sans passer par le login SPIP).
(t=36h) 

[dnc29] 2019/03/07 - Bug - Erreur "Incoherent user login" :
erreur de logique, couplée à l'absence de logout : quand on 
avait un cookie SLI activé pour un utilisateur, on n'avait pas le droit de se 
reconnecter sous un autre utilisateur avec le même navigateur. 
Maintenant, on peut changer d'utilisateur, ce qui détruit le cookie SLI en silence.
(t=2.5)
 
[dnc30] 2019/03/21 - Introspect. Acceptait les méthodes GET et POST mais pas Auth Header (Token Bearer).
Faite sur tous.
(t=2.2)

[dnc31] 2019/03/22 : La fonction de bibliothèque getReservedScopes() contient les scopes 'openid', 'offline_access' en dur.
Il manque donc 'sli'. Cette fonction n'est utilisée que par la couche OAuthSD, n'hésitons pas à la remplacer dans le code d'authorize.
(t=0.4)

[dnc32] 2019/03/22 : Bug : Quand on s'authentifie avec prompt = null, la demande de consentement n'est pas présentée. 
Elle sera présentée lors d'une reconnexion (sans identification) suivante.
(t=0.5) 

[dnc33] 2019/03/22 : Bug ? - Erreur "Return from login form with wrong state" quand on passe d'une appli à l'autre sur le même 
navigateur. Le controleur Authorize doit rester RESTful et prendre le state qui lui est fourni comme il est, et l'enregistrer dans sa session 
locale à chaque appel.

[dnc34] 2019/03/22 - La fonction sane_session_start() est remplacée par les nouvelles fonctions that_session_start() 
et new_session_start(). La session spécifique à ghostkeys() est supprimée.
(t=2.5)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
2019/04/10 - composer update
OAuth2 en date du 04/12/2018
Rétroaction des dnc 1 à 6 (pas 5).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 

[dnc35] 2019/04/10 - localisation de /oidc. Voir : https://github.com/smmoosavi/php-gettext
Langues : fr, de, en.
(t= 3.5)

[dnc14''] 2019/04/11 - Dans Token, le contrôle de l'IP ne peut s'appliquer à JWT Bearer.
(t=.4)

[dnc36] 2019/04/16-2019/04/24 : Authorize, plugin oidcclient v1.0.3 (SPIP 3.1) v1.0.4 (SPIP 3.2)
Monitoring
web : Informations OIDC et Formulaires en Popup.
Authorize : CORS automatique
(t=23h)

2019/04/26 - web : abandon du plugin datatables. Dans le fichier insert_head des pages concernées, inclusion de datatables à partir du CDN.
(t=1.5h)

[dnc37] 2019/04/29 - CSS des formulaires d'identification : tester la présence de my.css et lui donner la priorité sur le css inline.
Le css indiqué lors de l'inscription de l'application est toujours appliqué inline après le précédent.
(t=1.2h)  

[dnc38] 2019/04/29 - Dater les événements en microsecondes.
ALTER TABLE `spip_oidc_logs` CHANGE `datetime` `datetime` DATETIME(6) NULL;
Ajout du plugin TimePicker pour statistiques.
(t=1.2)

[dnc39] 2019/04/29 - plugin oidc_client : réduire state à 16 chars. 

[dnc29'] 2019/05/02 - Modification de la logique de détermination de $sub.
La priorité est : user_id de l'application, user_id passé dans la requête, sub de la session, Null.

TODO : vérifier test_JWTBearer.     

TODO: table clients, remplacer date_publication par updated_time et created time.

TODO: traduire les libellés et les messges de l'identification avec gettext.

TODO : enregistrer password en hash. ??? C'est déjà le cas ???

TODO : se connecter avec OIDC : il manque un message de succès.

TODO: problème? Dans la config du serveur, token_type de 'bearer' passe à 'Bearer'.







******************
*** PostgreSQL ***
******************

Avec Easy PHP, installation des extensions pgsql
Ok
*** Installation sur cPanel
Voir : https://documentation.cpanel.net/display/CKB/Install+or+Update+PostgreSQL+on+Your+cPanel+Server
/usr/local/cpanel/scripts/installpostgres
Configuration : Home »SQL Services »Configure PostgreSQL
Install ConfigurationCreate Users
Change Password ( sous-entendu pour l'user postgres ??? ): pgsqlX... (pas de caractère spécial).
Accès à phpPgAdmin : par cPanel.
*** Création BdD
Avec cPanel, Assistant de BdD PostgreSQL :
Création de la BdD dnc_oauth2 pour dnc_user : oidcinteX... (pas de caractère spécial)
GRANT ALL PRIVILEGES ON TABLE spip_users TO dnc_user;
t=.8h

*** /var/lib/pgsql/pgstartup.log :

The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale en_US.UTF-8.
The default database encoding has accordingly been set to UTF8.
The default text search configuration will be set to "english".

fixing permissions on existing directory /var/lib/pgsql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 32MB
creating configuration files ... ok
creating template1 database in /var/lib/pgsql/data/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

Success. You can now start the database server using:

    su postgres
    /usr/bin/postgres -D /var/lib/pgsql/data      ou ??? /usr/bin/postgres -p 5432 -D /var/lib/pgsql/data
or
    /usr/bin/pg_ctl -D /var/lib/pgsql/data -l logfile start
    
*** Le Socket Unix est :
    /tmp/.s.PGSQL.5432"?  

*** Pour se connecter avec SPIP :
- fichier /config/pg.php:
spip_connect_db('localhost','5432','dnc_user','oidcinteX9BVqA8','dnc_oauth2','pg', 'spip','','utf8');
- exemple de boucle :
<BOUCLE_pgusers(pg:spip_users) {tout}>
#USERNAME
</BOUCLE_pgusers>
t= .5h

***
PostgreSQL.conf file :
/var/lib/pgsql/data/postgresql.conf

Lancer :
oadnc@oa.dnc.global [~]# postgres --config-file /var/lib/pgsql/data/postgresql.conf

A propos de l'utilisation de curval dans spip_pg_insert, voir :
https://contrib.spip.net/postgresql
https://dba.stackexchange.com/questions/3281/how-do-i-use-currval-in-postgresql-to-get-the-last-inserted-id
Si toutes les tables ont un identificateur unique (c'est le cas dans SPIP core), 
que cette colonne a été crée comme 'serial', alors PostgreSQL crée automatiquement 
une séquence et currval ne sera pas utilisé. Donc, je ne vois pas pourquoi ne pas utiliser PostgresSQL.

*** création BdD pgSQL 
2019/02/03 - 

CREATE TABLE oauth_clients (
  id_client             serial,
  client_id             VARCHAR(80)   NOT NULL,
  client_secret         VARCHAR(80),
  redirect_uri          VARCHAR(2000),
  grant_types           VARCHAR(80),
  scope                 VARCHAR(4000),
  user_id               VARCHAR(80),
  PRIMARY KEY (client_id)
);

CREATE TABLE oauth_access_tokens (
  access_token         VARCHAR(40)    NOT NULL,
  client_id            VARCHAR(80)    NOT NULL,
  user_id              VARCHAR(80),
  expires              TIMESTAMP      NOT NULL,
  scope                VARCHAR(4000),
  PRIMARY KEY (access_token)
);

CREATE TABLE oauth_authorization_codes (
  authorization_code  VARCHAR(40)     NOT NULL,
  client_id           VARCHAR(80)     NOT NULL,
  user_id             VARCHAR(80),
  redirect_uri        VARCHAR(2000),
  expires             TIMESTAMP       NOT NULL,
  scope               VARCHAR(4000),
  id_token            VARCHAR(1000),
  PRIMARY KEY (authorization_code)
);

CREATE TABLE oauth_refresh_tokens (
  refresh_token       VARCHAR(40)     NOT NULL,
  client_id           VARCHAR(80)     NOT NULL,
  user_id             VARCHAR(80),
  expires             TIMESTAMP       NOT NULL,
  scope               VARCHAR(4000),
  PRIMARY KEY (refresh_token)
);

--
-- table étendue avec les données selon OIDC.
--

CREATE TABLE oauth_users (
    id_user serial NOT NULL,
    username character varying(255),
    password character varying(2000),
    given_name character varying(255),
    middle_name character varying(255),
    family_name character varying(255),
    nickname character varying(255),
    profil character varying(255),
    picture character varying(255),
    website character varying(255),
    email character varying(255),
    verified boolean,
    gender character varying(16),
    birthday character varying(64),
    zoneinfo character varying(64),
    locale character varying(16),
    phone_number character varying(64),
    street_address character varying(255),
    locality character varying(64),
    region character varying(64),
    postal_code character varying(32),
    country character varying(64),
    updated_time date,
    created_time date,
    statut character varying(20),
    maj timestamp without time zone,
    composition character varying(255),
    composition_lock boolean,
    profile text,
    comment text,
    scope character varying(256)
);

CREATE TABLE oauth_scopes (
  scope varchar(80) NOT NULL,
  is_default BOOLEAN DEFAULT NULL,
  scope_description text,
  PRIMARY KEY (scope)
); 

CREATE TABLE oauth_jwt (
  client_id           VARCHAR(80)     NOT NULL,
  subject             VARCHAR(80),
  public_key          VARCHAR(2000)   NOT NULL
);

--
-- Tables supplémentaires
--
CREATE TABLE oauth_oidc_logs (
  id_oidc_log serial NOT NULL,
  remote_addr character varying(255),
  state character varying(255),
  client_id character varying(255),
  user_id character varying(255),
  datetime date,
  origin character varying(255),
  message text,
  level bool
);

CREATE TABLE oauth_public_keys (
  id_public_key serial NOT NULL,
  client_id character varying(255),
  id_client bigint NOT NULL,
  public_key character varying(4096) NOT NULL,
  private_key character varying(4096) NOT NULL,
  encryption_algorithm character varying(100) NOT NULL DEFAULT 'RS256'
);

*** recopie des données de mysql à pgsql





            
******************
Modifications SPIP :
- Mediabox : /home/dnc/oa/plugins-dist/mediabox/colorbox/black-striped/images : invalider
overlay.png (pin pon! pin pon!)


*******************
Tests

http://oa.dnc.global/oauth/authorize.php?response_type=code&client_id=testclient&state=xyz
end-user : bebert : 01234567 ( sha1 = "ccaa8d8dcc7d030cd6a6768db81f90d0ef976c3d" )


*********************
2019/02/03 - création BdD pgSQL 

CREATE TABLE oauth_clients (
  id_client             serial,
  client_id             VARCHAR(80)   NOT NULL,
  client_secret         VARCHAR(80),
  redirect_uri          VARCHAR(2000),
  grant_types           VARCHAR(80),
  scope                 VARCHAR(4000),
  user_id               VARCHAR(80),
  PRIMARY KEY (client_id)
);

CREATE TABLE oauth_access_tokens (
  access_token         VARCHAR(40)    NOT NULL,
  client_id            VARCHAR(80)    NOT NULL,
  user_id              VARCHAR(80),
  expires              TIMESTAMP      NOT NULL,
  scope                VARCHAR(4000),
  PRIMARY KEY (access_token)
);

CREATE TABLE oauth_authorization_codes (
  authorization_code  VARCHAR(40)     NOT NULL,
  client_id           VARCHAR(80)     NOT NULL,
  user_id             VARCHAR(80),
  redirect_uri        VARCHAR(2000),
  expires             TIMESTAMP       NOT NULL,
  scope               VARCHAR(4000),
  id_token            VARCHAR(1000),
  PRIMARY KEY (authorization_code)
);

CREATE TABLE oauth_refresh_tokens (
  refresh_token       VARCHAR(40)     NOT NULL,
  client_id           VARCHAR(80)     NOT NULL,
  user_id             VARCHAR(80),
  expires             TIMESTAMP       NOT NULL,
  scope               VARCHAR(4000),
  PRIMARY KEY (refresh_token)
);

--
-- table étendue avec les données selon OIDC.
--

CREATE TABLE oauth_users (
    id_user serial NOT NULL,
    username character varying(255),
    password character varying(2000),
    given_name character varying(255),
    middle_name character varying(255),
    family_name character varying(255),
    nickname character varying(255),
    profil character varying(255),
    picture character varying(255),
    website character varying(255),
    email character varying(255),
    verified boolean,
    gender character varying(16),
    birthday character varying(64),
    zoneinfo character varying(64),
    locale character varying(16),
    phone_number character varying(64),
    street_address character varying(255),
    locality character varying(64),
    region character varying(64),
    postal_code character varying(32),
    country character varying(64),
    updated_time date,
    created_time date,
    statut character varying(20),
    maj timestamp without time zone,
    composition character varying(255),
    composition_lock boolean,
    profile text,
    comment text,
    scope character varying(256)
);

CREATE TABLE oauth_scopes (
  scope varchar(80) NOT NULL,
  is_default BOOLEAN DEFAULT NULL,
  scope_description text,
  PRIMARY KEY (scope)
); 

CREATE TABLE oauth_jwt (
  client_id           VARCHAR(80)     NOT NULL,
  subject             VARCHAR(80),
  public_key          VARCHAR(2000)   NOT NULL
);

--
-- Tables supplémentaires
--
CREATE TABLE oauth_oidc_logs (
  id_oidc_log serial NOT NULL,
  remote_addr character varying(255),
  state character varying(255),
  client_id character varying(255),
  user_id character varying(255),
  datetime date,
  origin character varying(255),
  message text,
  level bool
);

CREATE TABLE oauth_public_keys (
  id_public_key serial NOT NULL,
  client_id character varying(255),
  id_client bigint NOT NULL,
  public_key character varying(4096) NOT NULL,
  private_key character varying(4096) NOT NULL,
  encryption_algorithm character varying(100) NOT NULL DEFAULT 'RS256'
);


***
Problèmes du noyau SPIP avec pgSQL
"TIMESTAMPDIFF(HOUR,syndic_articles.date,NOW())/24" = column hour does'nt exist

***
Transposer MySQL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP :
Voir : https://stackoverflow.com/questions/1035980/update-timestamp-when-row-is-updated-in-postgresql
??? 

((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
pgsql : problème avec le role dnc qui s'impose comme owner des tables nouvelles.
( le problème provient de ce que j'utilisais cPanel sur l'utilisateur dnc, et non oadnc.)

*** on essaie :
ALTER TABLE public.spip_clients OWNER TO dnc_user;
répond:
ERROR:  must be member of role "dnc_user"

*** voir les tables :
su postgres -c 'psql -l'
                                  List of databases
   Name    |  Owner   | Encoding |  Collation  |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 spip      | spip     | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/spip
                                                             : spip=CTc/spip
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres
                                                             : postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres
                                                             : postgres=CTc/postgres
                                                             
 *** pgsql : sauvegarde pour voir comment sont définies les rôles :
pg_dumpall -U postgres >/var/lib/pgsql/backups/data.sql

data.sql Montre :
--
-- Roles
--
CREATE ROLE dnc;
ALTER ROLE dnc WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN PASSWORD 'md5844245a9e5b06e057db3960d9b4ffa8e';
CREATE ROLE dnc_user;
ALTER ROLE dnc_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN PASSWORD 'md505eb3c92f131331fc5ecd01a4bff52ed';
...
CREATE ROLE postgres;
ALTER ROLE postgres WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN PASSWORD 'md5f31bdaa735feaea15823331f9c5b10a0';
CREATE ROLE spip;
ALTER ROLE spip WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN;
... des tas de rôles inutiles ...
...
--
-- Role memberships
--
GRANT dnc TO dnc_user GRANTED BY dnc;
GRANT spip TO dnc GRANTED BY postgres;
GRANT spip TO dnc_user GRANTED BY postgres;
...
Les tables impliquées ont : ALTER TABLE public.spip_clients OWNER TO dnc;

*** modification de data.sql -> data2.sql
Sans dnc et OWNER TO dnc remplacé par OWNER TO dnc_user
et Owner: dnc par Owner: dnc_user
et REVOKE ALL ON TABLE spip_clients FROM dnc;
GRANT ALL ON TABLE spip_clients TO dnc; par etc.

( Curieux : dans spip_types_documents nous avons : ape    Monkey's Audio File
Le ' n'est pas échappé ??? Casse le colorcode de notepad++
Suppression de 's : Ok )

Roles modifié comme suit :
--
-- Roles
--
CREATE ROLE dnc_user;
ALTER ROLE dnc_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN PASSWORD 'md505eb3c92f131331fc5ecd01a4bff52ed';
CREATE ROLE oadnc;
ALTER ROLE oadnc WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN PASSWORD 'md515b44804ec59a6209f9fd2881d4b54b6';
CREATE ROLE postgres;
ALTER ROLE postgres WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN PASSWORD 'md5f31bdaa735feaea15823331f9c5b10a0';
CREATE ROLE spip;
ALTER ROLE spip WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN;
--
-- Role memberships
--
GRANT spip TO dnc_user GRANTED BY postgres;
GRANT oadnc TO dnc_user GRANTED BY postgres;

remplacé DATABASE spip par DATABASE oidc_spip

*** suppression de la BdD spip
root@vps223233 [~]# su postgres
bash-4.1$ dropdb spip;
could not change directory to "/root"
Password: ...

t=4.5h


************************************************************
*** avec cPanel, domaine oa.dnc.global, utilisateur oadnc :
création de la base de données PostgreSQL oadnc_spip 
pour oadnc_user : oadncX... (pas de caractère spécial).

*** import de data2.sql
Ok, malgré de nombreuses erreurs découlant du fait que le rôle spip n'existe pas.
Tous les objets sont créés avec owner oadnc et les permissions par défaut : Ok

*** connexion de SPIP :
spip_connect_db('localhost','5432','oadnc_user','oadncX...','oadnc_spip','pg', 'spip','','');
Ok
(t=.5h)

*** Erreur  permission denied for sequence ...
GRANT USAGE - For sequences, this privilege allows the use of the currval and nextval functions.

Pour PostgreSQL >= 9 : 
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO dnc_user;

Pour 8x :
Tables auteurs:
grant all on sequence spip_auteurs_id_auteur_seq to oadnc_user;
Ok
Le faire pour toutes les séquences, ou manuellement avec Schémas >> Public >> Séquences
Ok
t=1.2h

*** PgLoader
sudo yum install -y git 
git clone https://github.com/dimitri/pgloader.git 
cd pgloader 
chmod +x ./bootstrap-centos6.sh 
sudo ./bootstrap-centos6.sh
... 
make pgloader  ???
make COMPRESS_CORE=no pgloader
... puis échec
nOk

***
Spip : configuration des plugins : erreur pgsql.
nOk
STOP
t=2.5h       

Conclusion : Spip core ne peut pas fonctionner avec PostgreSQL sans un grand 
nombre de modifications aux requêtes.
En revanche, Spip accède bien à une BdD externe PostgreSQL à condition de ne 
faire que des requêtes SQL ANSI.

))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

***** SPIP avec MySQL, OIDC avec PostgreSQL ****
2019/02/07
Voir oidc.dnc.global
ABANDONNE


))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

***** JMeter *****
2019/03/17
Installation locale :
https://www.guru99.com/guide-to-install-jmeter.html
- installation de Java SE Runtime (JRE) 1.8.0_1201
- download Apache JMeter http://jmeter.apache.org/download_jmeter.cgi
- installation dans C:\java\jmeter
- Lancement en mode GUI : C:\java\jmeter\bin\jmeter.bat
...

***** Unit Testing, PHPUnit + PhpEd *****
2019/03/17
(https://phpunit.de/)
Running phpUnit in PhpED
http://www.nusphere.com/products/php_testing_phpunit.htm

TODO: Pour purifier la chose, il faut faire de OAuthSD une classe dérivée de OAuth2 !
...














